package com.todo.todo.Controller;

import com.todo.todo.Controller.Requests.UserRequest;
import com.todo.todo.Controller.Responses.UserResponse;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.ExampleObject;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.parameters.RequestBody;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

/**
 * Interface responsável por definir os endpoints relacionados aos usuários,
 * utilizada para documentação com Swagger (OpenAPI).
 */
public interface UserSwagger {

    @Operation(summary = "Listar todos os usuários", description = "Retorna uma lista com todos os usuários cadastrados no sistema.")
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Usuários listados com sucesso")
    })
    @GetMapping("/")
    ResponseEntity<List<UserResponse>> getUsers();

    @Operation(summary = "Buscar usuário por ID", description = "Retorna os dados de um usuário específico com base no ID informado.")
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Usuário encontrado"),
            @ApiResponse(responseCode = "404", description = "Usuário não encontrado")
    })
    @GetMapping("/{id}")
    ResponseEntity<UserResponse> getUser(
            @Parameter(description = "ID do usuário a ser buscado") @PathVariable("id") Long id);

    @Operation(summary = "Excluir usuário", description = "Remove um usuário do sistema com base no ID informado.")
    @ApiResponses(value = {
            @ApiResponse(responseCode = "204", description = "Usuário excluído com sucesso"),
            @ApiResponse(responseCode = "404", description = "Usuário não encontrado")
    })
    @DeleteMapping("/{id}")
    ResponseEntity<Void> deleteUser(
            @Parameter(description = "ID do usuário a ser excluído") @PathVariable("id") Long id);

    @Operation(summary = "Criar novo usuário", description = "Adiciona um novo usuário ao sistema com os dados fornecidos.")
    @ApiResponses(value = {
            @ApiResponse(responseCode = "201", description = "Usuário criado com sucesso"),
            @ApiResponse(responseCode = "400", description = "Dados inválidos")
    })
    @PostMapping("/")
    ResponseEntity<UserResponse> createUser(
            io.swagger.v3.oas.annotations.parameters.@RequestBody(
                    description = "Dados do novo usuário",
                    required = true,
                    content = @Content(
                            schema = @Schema(implementation = UserRequest.class),
                            examples = @ExampleObject(name = "Exemplo de criação de usuário", value = """
                                {
                                  "name": "João Silva",
                                  "email": "joao.silva@example.com",
                                  "password": "senha123"
                                }
                            """)
                    )
            )
            @RequestBody UserRequest userRequest);

    @Operation(summary = "Atualizar usuário", description = "Atualiza os dados de um usuário existente com base no ID informado.")
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Usuário atualizado com sucesso"),
            @ApiResponse(responseCode = "400", description = "Dados inválidos"),
            @ApiResponse(responseCode = "404", description = "Usuário não encontrado")
    })
    @PutMapping("/{id}")
    ResponseEntity<UserResponse> updateUser(
            @Parameter(description = "ID do usuário a ser atualizado") @PathVariable("id") Long id,
            @org.springframework.web.bind.annotation.RequestBody(
                    description = "Dados atualizados do usuário",
                    required = true,
                    content = @Content(
                            schema = @Schema(implementation = UserRequest.class),
                            examples = @ExampleObject(name = "Exemplo de atualização de usuário", value = """
                                {
                                  "name": "João Atualizado",
                                  "email": "joao.atualizado@example.com",
                                  "password": "novaSenha123"
                                }
                            """)
                    )
            )
            @RequestBody UserRequest userRequest);
}
